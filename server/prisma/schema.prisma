// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  firstname     String
  lastname      String
  email         String         @unique
  password      String         @unique
  role          Role           @default(USER)
  posts         Post[]
  createdAt     DateTime       @default(now())
  savedPosts    SavedPost[]
  comments      Comment[]
  notifications Notification[]
}

model Post {
  id          String      @id @default(uuid())
  userId      String
  title       String
  description String?
  image       String
  category    String
  status      PostStatus  @default(PENDING)
  likes       Int
  comments    Comment[]
  createdAt   DateTime    @default(now())
  savedBy     SavedPost[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedPost {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String           @id @default(uuid())
  userId     String
  type       NotificationType
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  message    String?
  postId     String
  mediaUrl   String
  mediaTitle String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  MEDIA_APPROVED
  MEDIA_REJECTED
}
